apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zitadel.fullname" . }}
  labels:
    {{- include "zitadel.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "zitadel.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret-db-ssl-root-crt: {{ include (print $.Template.BasePath "/secret_db-ssl-root-crt.yaml") . | sha256sum }}
        checksum/secret-zitadel-secrets: {{ include (print $.Template.BasePath "/secret_zitadel-secrets.yaml") . | sha256sum }}
      labels:
        {{- include "zitadel.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "zitadel.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      enableServiceLinks: false
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 14 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - admin
            - start-from-init
            - --config
            - /config/zitadel-config-yaml
            {{- if .Values.zitadel.secretConfig }}
            - --config
            - /.secrets/zitadel-secrets-yaml
            {{- end}}
            - --steps
            - /config/zitadel-config-yaml
            - --masterkeyFile
            - /.secrets/zitadel-masterkey
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            {{- if (or .Values.zitadel.dbSslRootCrt .Values.zitadel.dbSslRootCrtSecret) }}
            - name: ZITADEL_DATABASE_USER_SSL_ROOTCERT
              value: /.secrets/ca.crt
            - name: ZITADEL_ADMINUSER_SSL_ROOTCERT
              value: /.secrets/ca.crt
            {{- end}}
            {{- if .Values.zitadel.dbSslClientCrtSecret }}
            - name: ZITADEL_ADMINUSER_SSL_CERT
              value: /.secrets/tls.crt
            - name: ZITADEL_ADMINUSER_SSL_KEY
              value: /.secrets/tls.key
            {{- end}}
          ports:
          - containerPort: 8080
            name: {{ .Values.service.protocol }}-server
            protocol: TCP
          volumeMounts:
          - name: zitadel-config-yaml
            mountPath: /config
          - name: chowned-secrets
            mountPath: /.secrets
          resources:
            {{- toYaml .Values.resources | nindent 14 }}
      initContainers:
        - args:
          - "{{ include "zitadel.joincpcommands" (dict "commands" (list
            (include "zitadel.makecpcommand" (dict "value" .Values.zitadel.secretConfig "path" "/zitadel-secrets-yaml/*" ))
            (include "zitadel.makecpcommand" (dict "value" .Values.zitadel.masterkey "path" "/zitadel-masterkey/*" ))
            (include "zitadel.makecpcommand" (dict "value" (or .Values.zitadel.dbSslRootCrt .Values.zitadel.dbSslRootCrtSecret) "path" "/db-ssl-root-crt/*" ))
            (include "zitadel.makecpcommand" (dict "value" .Values.zitadel.dbSslClientCrtSecret "path" "/db-ssl-client-crt/*" ))
          )) }} chown -R 1000:1000 /chowned-secrets/* && chmod 400 /chowned-secrets/*"
          command:
          - sh
          - -c
          image: "{{ .Values.chownImage.repository }}:{{ .Values.chownImage.tag }}"
          imagePullPolicy: {{ .Values.chownImage.pullPolicy }}
          name: chown
          volumeMounts:
          - name: chowned-secrets
            mountPath: /chowned-secrets
          - name: zitadel-masterkey
            mountPath: /zitadel-masterkey
          {{- if .Values.zitadel.secretConfig }}
          - name: zitadel-secrets-yaml
            mountPath: /zitadel-secrets-yaml
          {{- end}}
          {{- if (or .Values.zitadel.dbSslRootCrt .Values.zitadel.dbSslRootCrtSecret) }}
          - name: db-ssl-root-crt
            mountPath: /db-ssl-root-crt
          {{- end}}
          {{- if (not ( empty .Values.zitadel.dbSslClientCrtSecret )) }}
          - name: db-ssl-client-crt
            mountPath: /db-ssl-client-crt
          {{- end}}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
      volumes:
      - name: zitadel-config-yaml
        configMap:
          name: zitadel-config-yaml
      {{- if (not ( empty .Values.zitadel.secretConfig)) }}
      - name: zitadel-secrets-yaml
        secret:
          secretName: zitadel-secrets-yaml
      {{- end }}
      {{- if (not ( empty .Values.zitadel.dbSslRootCrt)) }}
      - name: db-ssl-root-crt
        secret:
          secretName: db-ssl-root-crt
      {{- end }}
      {{- if (not ( empty .Values.zitadel.dbSslRootCrtSecret )) }}
      - name: db-ssl-root-crt
        secret:
          secretName: {{.Values.zitadel.dbSslRootCrtSecret}}
      {{- end }}
      {{- if (not ( empty .Values.zitadel.dbSslClientCrtSecret )) }}
      - name: db-ssl-client-crt
        secret:
          secretName: {{.Values.zitadel.dbSslClientCrtSecret}}
      {{- end }}
      - name: zitadel-masterkey
        secret:
          secretName: zitadel-masterkey
      - name: chowned-secrets
        emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
