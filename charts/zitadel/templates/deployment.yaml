apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zitadel.fullname" . }}
  labels:
    {{- include "zitadel.labels" . | nindent 4 }}
    app.kubernetes.io/component: start
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "zitadel.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret-db-ssl-root-crt: {{ include (print $.Template.BasePath "/secret_db-ssl-root-crt.yaml") . | sha256sum }}
        checksum/secret-zitadel-secrets: {{ include (print $.Template.BasePath "/secret_zitadel-secrets.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/component: start
        {{- include "zitadel.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "zitadel.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      enableServiceLinks: false
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 14 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - start
            - --config
            - /config/zitadel-config-yaml
            {{- if .Values.zitadel.secretConfig }}
            - --config
            - /.secrets/zitadel-secrets-yaml/zitadel-secrets-yaml
            {{- end }}
            {{- if and .Values.zitadel.configSecretName .Values.zitadel.configSecretKey }}
            - --config
            - /.secrets/zitadel-secret-config-yaml/{{ .Values.zitadel.configSecretKey }}
            {{- end }}
            - --masterkeyFromEnv
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: ZITADEL_MASTERKEY
              valueFrom:
                secretKeyRef:
                  name: {{ default "zitadel-masterkey" .Values.zitadel.masterkeySecretName }}
                  key: masterkey
            {{- $dbEnv := get (include "zitadel.dbkey.json" . | fromJson) "env" }}
            {{- if (or .Values.zitadel.dbSslCaCrt .Values.zitadel.dbSslCaCrtSecret) }}
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_ROOTCERT
              value: /.secrets/db-ssl-ca-crt/ca.crt
            {{- end}}
            {{- if .Values.zitadel.dbSslUserCrtSecret }}
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_CERT
              value: /.secrets/db-ssl-user-crt/tls.crt
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_KEY
              value: /.secrets/db-ssl-user-crt/tls.key
            {{- end}}
            {{- with .Values.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
          - containerPort: 8080
            name: {{ .Values.service.protocol }}-server
            protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /debug/healthz
              port: {{ .Values.service.protocol }}-server
              {{- if .Values.zitadel.configmapConfig.ExternalDomain }}
              httpHeaders:
                - name: Host
                  value: {{ .Values.zitadel.configmapConfig.ExternalDomain }}
              {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /debug/ready
              port: {{ .Values.service.protocol }}-server
              {{- if .Values.zitadel.configmapConfig.ExternalDomain }}
              httpHeaders:
                - name: Host
                  value: {{ .Values.zitadel.configmapConfig.ExternalDomain }}
              {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /debug/ready
              port: {{ .Values.service.protocol }}-server
              {{- if .Values.zitadel.configmapConfig.ExternalDomain }}
              httpHeaders:
                - name: Host
                  value: {{ .Values.zitadel.configmapConfig.ExternalDomain }}
              {{- end }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          volumeMounts:
          - name: zitadel-config-yaml
            mountPath: /config
          - name: chowned-secrets
            mountPath: /.secrets
          resources:
            {{- toYaml .Values.resources | nindent 14 }}
      initContainers:
        - args:
          - "{{ include "zitadel.joincpcommands" (dict "commands" (list
              (include "zitadel.makecpcommand" (dict "value" .Values.zitadel.secretConfig "path" "/zitadel-secrets-yaml/" ))
              (include "zitadel.makecpcommand" (dict "value" .Values.zitadel.configSecretName "path" "/zitadel-secret-config-yaml/" ))
              (include "zitadel.makecpcommand" (dict "value" (or .Values.zitadel.dbSslCaCrt .Values.zitadel.dbSslCaCrtSecret) "path" "/db-ssl-ca-crt/" ))
              (include "zitadel.makecpcommand" (dict "value" .Values.zitadel.dbSslUserCrtSecret "path" "/db-ssl-user-crt/" ))
              )) }} chown -R 1000:1000 /chowned-secrets/ && find /chowned-secrets/ -type f -exec chmod 400 -- {} + "
          command:
          - sh
          - -c
          image: "{{ .Values.chownImage.repository }}:{{ .Values.chownImage.tag }}"
          imagePullPolicy: {{ .Values.chownImage.pullPolicy }}
          name: chown
          volumeMounts:
          - name: chowned-secrets
            mountPath: /chowned-secrets
          {{- if .Values.zitadel.secretConfig }}
          - name: zitadel-secrets-yaml
            mountPath: /zitadel-secrets-yaml
          {{- end }}
          {{- if .Values.zitadel.configSecretName }}
          - name: zitadel-secret-config-yaml
            mountPath: /zitadel-secret-config-yaml
          {{- end }}
          {{- if (or .Values.zitadel.dbSslCaCrt .Values.zitadel.dbSslCaCrtSecret) }}
          - name: db-ssl-ca-crt
            mountPath: /db-ssl-ca-crt
          {{- end }}
          {{- if .Values.zitadel.dbSslUserCrtSecret }}
          - name: db-ssl-user-crt
            mountPath: /db-ssl-user-crt
          {{- end }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
      volumes:
      - name: zitadel-config-yaml
        configMap:
          name: zitadel-config-yaml
      {{- if .Values.zitadel.secretConfig }}
      - name: zitadel-secrets-yaml
        secret:
          secretName: zitadel-secrets-yaml
      {{- end }}
      {{- if .Values.zitadel.configSecretName }}
      - name: zitadel-secret-config-yaml
        secret:
          secretName: {{ .Values.zitadel.configSecretName }}
      {{- end }}
      {{- if .Values.zitadel.dbSslCaCrt }}
      - name: db-ssl-ca-crt
        secret:
          secretName: db-ssl-ca-crt
      {{- end }}
      {{- if .Values.zitadel.dbSslCaCrtSecret }}
      - name: db-ssl-ca-crt
        secret:
          secretName: {{ .Values.zitadel.dbSslCaCrtSecret }}
      {{- end }}
      {{- if .Values.zitadel.dbSslUserCrtSecret }}
      - name: db-ssl-user-crt
        secret:
          secretName: {{ .Values.zitadel.dbSslUserCrtSecret }}
      {{- end }}
      - name: chowned-secrets
        emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
