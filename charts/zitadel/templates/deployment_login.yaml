{{- if .Values.login.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zitadel.login.fullname" . }}
  labels:
    {{- include "login.labels" . | nindent 4 }}
  {{- with .Values.login.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.login.revisionHistoryLimit }}
  revisionHistoryLimit: {{ .Values.login.revisionHistoryLimit }}
  {{- end }}
  {{- if not .Values.login.autoscaling.enabled }}
  replicas: {{ .Values.login.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "login.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.login.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap_login.yaml") . | sha256sum }}
        checksum/nginx-configmap: {{ include (print $.Template.BasePath "/configmap_nginx_login.yaml") . | sha256sum }}
      labels:
        {{- include "login.labels" . | nindent 8 }}
        {{- with .Values.podAdditionalLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "login.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.login.podSecurityContext | nindent 8 }}
      enableServiceLinks: false
      containers:
      {{- if .Values.login.extraContainers }}
        {{- toYaml .Values.login.extraContainers | nindent 8 }}
      {{- end }}
        - name: {{ .Chart.Name }}-reverse-proxy
          # Nginx sidecar container handles TLS termination and proxies
          # traffic to the Login application container. This separation
          # allows the Login app to focus on application logic while
          # nginx manages TLS, connection handling, and WebSocket
          # upgrades.
          # Ref: https://kubernetes.io/docs/concepts/workloads/pods/
          # Alpine-based nginx image for smaller footprint. Version
          # pinned to 1.27 for stability and security updates.
          # Ref: https://hub.docker.com/_/nginx
          image: {{ .Values.login.nginx.image | default "nginx:1.27-alpine" }}
          imagePullPolicy: {{ .Values.login.image.pullPolicy }}
          # Run nginx in foreground (daemon off) so Kubernetes can
          # manage the process lifecycle. Without this, nginx would
          # fork to background and the container would exit.
          # The -g flag sets global directives (no long-form option).
          # Ref: https://nginx.org/en/docs/ngx_core_module.html#daemon
          command: ["nginx", "-g", "daemon off;"]
          ports:
            # Nginx listens on port 80 (HTTP) or 443 (HTTPS) depending
            # on whether TLS is enabled. The helper function
            # login.nginxPort returns the appropriate port.
            - containerPort: {{ .Values.login.service.port }}
              # Port name derived from login.service.protocol (e.g.,
              # "http-server"). Used for service port mapping.
              name: {{ .Values.login.service.protocol }}-server
              protocol: TCP
          # Liveness probe checks if nginx is responding. Kubernetes
          # will restart the container if this fails 3 times. The
          # /healthz endpoint is defined in the nginx config and
          # always returns 200 OK.
          # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.login.service.port }}
              # Use HTTPS scheme when TLS is enabled, HTTP otherwise.
              # This matches how nginx is configured to listen.
              {{- if include "config.useTls" . }}
              scheme: HTTPS
              {{- else }}
              scheme: HTTP
              {{- end }}
            # These probe timing values are tested defaults and rarely
            # need adjustment. They are intentionally not exposed as
            # configurable values to maintain consistency.
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          # Readiness probe determines if the container should receive
          # traffic. Uses same /healthz endpoint but with more
          # frequent checks (every 5s) to quickly detect when nginx
          # is ready to serve traffic after startup or restart.
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.login.service.port }}
              {{- if include "config.useTls" . }}
              scheme: HTTPS
              {{- else }}
              scheme: HTTP
              {{- end }}
            # These probe timing values are tested defaults and rarely
            # need adjustment. They are intentionally not exposed as
            # configurable values to maintain consistency.
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3
          # Volume mounts for nginx. These paths and configurations
          # are nginx-specific internals and are intentionally not
          # exposed as configurable values to maintain security and
          # stability.
          volumeMounts:
            # Writable directory for nginx cache. Required because
            # the container runs with readOnlyRootFilesystem.
            # Not readOnly - nginx must write cache files here.
            - name: nginx-cache
              mountPath: /var/cache/nginx
            # Writable directory for nginx runtime files (pid, locks).
            # Required for non-root nginx operation.
            # Not readOnly - nginx must write runtime state here.
            - name: nginx-run
              mountPath: /var/run
            # Nginx configuration file defining server blocks,
            # upstreams, TLS settings, and HTTP/WebSocket proxy rules.
            # Mounted as default.conf in the conf.d directory.
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d
              readOnly: true
            {{- if .Values.login.serverSslCrtSecret }}
            - name: server-ssl-crt
              mountPath: /etc/nginx/certs
              readOnly: true
            {{- else if .Values.login.selfSignedCert.enabled }}
            - name: tls
              mountPath: /etc/nginx/certs
              readOnly: true
            {{- end }}
        - name: {{ .Chart.Name }}-login
          securityContext:
            {{- toYaml .Values.login.securityContext | nindent 14 }}
          image: "{{ .Values.login.image.repository }}:{{ .Values.login.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.login.image.pullPolicy }}
          env:
            - name: NEXT_PUBLIC_BASE_PATH
              value: /ui/v2/login
            {{- with .Values.login.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
          - containerPort: {{ include "login.containerPort" . }}
            name: app-http
            protocol: TCP
          {{- if .Values.login.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ include "login.livenessProbePath" . }}
              port: app-http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.login.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.login.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.login.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.login.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ include "login.readinessProbePath" . }}
              port: app-http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.login.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.login.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.login.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.login.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ include "login.startupProbePath" . }}
              port: app-http
              scheme: HTTP
            periodSeconds: {{ .Values.login.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.login.startupProbe.failureThreshold }}
          {{- end }}
          volumeMounts:
          - name: login-config-dotenv
            mountPath: /.env-file/
            readOnly: true
          {{- if and (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.LoginClient"))) (not (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Skip")))) }}
          - name: login-client
            mountPath: /login-client
            readOnly: true
          {{- end }}
          {{- with .Values.login.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          resources:
            {{- toYaml .Values.login.resources | nindent 14 }}
      initContainers:
        # This initContainer acts as a dependency check, ensuring the Login UI pod
        # does not start until the main Zitadel API is fully initialized and ready
        # to serve traffic. It prevents a race condition where the UI might start,
        # fail to connect to the backend, and enter an error state.
        #
        # It uses the `wait4x` tool to poll the Zitadel pod's readiness endpoint
        # (`/debug/ready`). Startup is paused until this endpoint returns an HTTP 200
        # OK status. The `--insecure-skip-tls-verify` flag is included to support
        # environments that use self-signed certificates for internal TLS.
        - name: wait-for-zitadel
          image: wait4x/wait4x:3.5
          command:
            - wait4x
            - http
            - {{ include "zitadel.clusterEndpoint" . }}
            - --insecure-skip-tls-verify
            - --expect-status-code
            - "200"
            - --timeout
            - "5m"
            - --interval
            - "5s"
      {{- with .Values.login.initContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      # Nginx requires writable directories for cache and runtime
      # files. These emptyDir volumes provide temporary storage that
      # persists for the pod lifetime but is cleared on restart.
      # Required because the nginx container runs with
      # readOnlyRootFilesystem security context (best practice for
      # container security).
      # Ref: https://kubernetes.io/docs/concepts/storage/volumes/
      # Ref: https://nginx.org/en/docs/ngx_core_module.html#user
      - name: nginx-cache
        emptyDir: { }
      - name: nginx-run
        emptyDir: { }
      # Nginx configuration that defines how traffic is proxied from
      # nginx to the login application. Contains server blocks,
      # upstream definitions, TLS settings, proxy headers, and
      # WebSocket support. Generated from configmap_nginx_login.yaml.
      # Mounted at /etc/nginx/conf.d/default.conf
      # Ref: https://nginx.org/en/docs/beginners_guide.html
      - name: nginx-conf
        configMap:
          name: {{ include "zitadel.login.fullname" . }}-nginx
      - name: login-config-dotenv
        configMap:
          name: {{ include "login.configmapName" . }}
      {{- if and (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.LoginClient"))) (not (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Skip")))) }}
      - name: login-client
        secret:
          defaultMode: 444
          secretName: {{ .Values.login.loginClientSecretPrefix }}login-client
      {{- end }}
      {{- if .Values.login.serverSslCrtSecret }}
      - name: server-ssl-crt
        secret:
          secretName: {{ .Values.login.serverSslCrtSecret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.login.selfSignedCert.enabled }}
      - name: tls
        secret:
          secretName: {{ include "zitadel.login.fullname" . }}-self-signed-tls
      {{- end }}
      {{- with .Values.login.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.login.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.login.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.login.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.login.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
