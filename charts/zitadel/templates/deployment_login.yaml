{{- if .Values.login.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zitadel.login.fullname" . }}
  labels:
    {{- include "login.labels" . | nindent 4 }}
  {{- with .Values.login.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.login.revisionHistoryLimit }}
  revisionHistoryLimit: {{ .Values.login.revisionHistoryLimit }}
  {{- end }}
  {{- if not .Values.login.autoscaling.enabled }}
  replicas: {{ .Values.login.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "login.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.login.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap_login.yaml") . | sha256sum }}
      labels:
        {{- include "login.labels" . | nindent 8 }}
        {{- with .Values.podAdditionalLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "login.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.login.podSecurityContext | nindent 8 }}
      enableServiceLinks: false
      containers:
      {{- if .Values.login.extraContainers }}
        {{- toYaml .Values.login.extraContainers | nindent 8 }}
      {{- end }}
        - name: {{ .Chart.Name }}-login
          securityContext:
            {{- toYaml .Values.login.securityContext | nindent 14 }}
          image: "{{ .Values.login.image.repository }}:{{ .Values.login.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.login.image.pullPolicy }}
          env:
            - name: NEXT_PUBLIC_BASE_PATH
              value: /ui/v2/login
            {{- with .Values.login.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
          - containerPort: {{ include "login.containerPort" . }}
            name: {{ .Values.login.service.protocol }}-server
            protocol: TCP
          {{- if .Values.login.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ include "login.livenessProbePath" . }}
              port: {{ .Values.login.service.protocol }}-server
              scheme: {{ .Values.login.service.scheme }}
            initialDelaySeconds: {{ .Values.login.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.login.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.login.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.login.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ include "login.readinessProbePath" . }}
              port: {{ .Values.login.service.protocol }}-server
              scheme: {{ .Values.login.service.scheme }}
            initialDelaySeconds: {{ .Values.login.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.login.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.login.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.login.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ include "login.startupProbePath" . }}
              port: {{ .Values.login.service.protocol }}-server
              scheme: {{ .Values.login.service.scheme }}
            periodSeconds: {{ .Values.login.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.login.startupProbe.failureThreshold }}
          {{- end }}
          volumeMounts:
          - name: login-config-dotenv
            mountPath: /.env-file/
            readOnly: true
          {{- if and (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.LoginClient"))) (not (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Skip")))) }}
          - name: login-client
            mountPath: /login-client
            readOnly: true
          {{- end }}
          {{- with .Values.login.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          resources:
            {{- toYaml .Values.login.resources | nindent 14 }}
      initContainers:
        # This initContainer acts as a dependency check, ensuring the Login UI pod
        # does not start until the main Zitadel API is fully initialized and ready
        # to serve traffic. It prevents a race condition where the UI might start,
        # fail to connect to the backend, and enter an error state.
        #
        # Uses curl with --http2-prior-knowledge to properly handle HTTP/2 (h2c)
        # health checks against Zitadel's /debug/ready endpoint. This ensures
        # compatibility with service meshes and HTTP/2 configurations.
        #
        # NOTE: Do not replace with wait4x - it does not properly handle HTTP/2
        # health checks and will fail in service mesh environments.
        #
        # The script polls the endpoint until it returns HTTP 200 OK. The --insecure
        # flag supports environments using self-signed certificates.
        - name: wait-for-zitadel
          image: curlimages/curl:8.10.1
          command:
            - sh
            - -c
            - |
              echo "Waiting for Zitadel to be ready..."
              until curl -f -s --insecure --http2-prior-knowledge --max-time 5 {{ include "zitadel.clusterEndpoint" . }} > /dev/null 2>&1; do
                echo "Zitadel not ready yet, retrying in 5s..."
                sleep 5
              done
              echo "Zitadel is ready!"
      {{- with .Values.login.initContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: login-config-dotenv
        configMap:
          name: {{ include "login.configmapName" . }}
      {{- if and (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.LoginClient"))) (not (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Skip")))) }}
      - name: login-client
        secret:
          defaultMode: 444
          secretName: {{ .Values.login.loginClientSecretPrefix }}login-client
      {{- end }}
      {{- with .Values.login.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.login.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.login.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.login.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.login.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
