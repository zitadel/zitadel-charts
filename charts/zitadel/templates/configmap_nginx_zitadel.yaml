#file: noinspection HttpUrlsUsage
# -----------------------------------------------------------------------------
# This ConfigMap defines the NGINX configuration for the ZITADEL sidecar. It is
# used by the additional "nginx-ssl" container that runs alongside the main
# Zitadel application container. The sidecar is responsible for terminating TLS
# and proxying traffic to the Zitadel service. This ConfigMap is mounted as the
# default.conf inside the sidecar. It is separate from the login sidecar, so
# that Zitadel and Login can evolve independently.
# -----------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "zitadel.fullname" . }}-nginx
  labels:
    {{- include "zitadel.labels" . | nindent 4 }}
data:
  default.conf: |
    # Nginx proxies to the Zitadel app on the internal port (port 8080)
    upstream zitadel_app {
      server 127.0.0.1:8080;
    }

    {{- if include "zitadel.tlsEnabled" . }}
    server {
      # Nginx listens on the configured port for HTTPS with HTTP/2 support (required for gRPC)
      listen {{ include "zitadel.nginxPort" . }} ssl;
      http2 on;
      ssl_certificate     /etc/nginx/certs/tls.crt;
      ssl_certificate_key /etc/nginx/certs/tls.key;

      location /healthz {
        return 200 "ok\n";
      }

      location / {
        # gRPC proxy configuration
        grpc_pass grpc://zitadel_app;
        grpc_set_header Host $host;
        grpc_set_header X-Real-IP $remote_addr;
        grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        grpc_set_header X-Forwarded-Host $host;
        grpc_set_header X-Forwarded-Port $server_port;
        grpc_set_header X-Forwarded-Proto https;

        # Fallback to HTTP proxy for non-gRPC requests
        error_page 502 = @http_proxy;
      }

      location @http_proxy {
        proxy_pass http://zitadel_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;

        proxy_pass_header Server;
        proxy_pass_header Date;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }
    }
    {{- else }}
    server {
      # Nginx listens on the configured port for HTTP with HTTP/2 support (required for gRPC)
      listen {{ include "zitadel.nginxPort" . }};
      http2 on;

      location /healthz {
        return 200 "ok\n";
      }

      location / {
        # gRPC proxy configuration
        grpc_pass grpc://zitadel_app;
        grpc_set_header Host $host;
        grpc_set_header X-Real-IP $remote_addr;
        grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        grpc_set_header X-Forwarded-Host $host;
        grpc_set_header X-Forwarded-Port $server_port;
        grpc_set_header X-Forwarded-Proto http;

        # Fallback to HTTP proxy for non-gRPC requests
        error_page 502 = @http_proxy;
      }

      location @http_proxy {
        proxy_pass http://zitadel_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;

        proxy_pass_header Server;
        proxy_pass_header Date;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }
    }
    {{- end }}
