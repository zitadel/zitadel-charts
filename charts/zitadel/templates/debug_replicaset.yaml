{{- if .Values.zitadel.debug.enabled }}
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: "{{ include "zitadel.fullname" . }}-debug"
  labels:
    app.kubernetes.io/component: debug
  {{- with .Values.zitadel.debug.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "zitadel.debugSelectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret-db-ssl-ca-crt: {{ include (print $.Template.BasePath "/secret_db-ssl-ca-crt.yaml") . | sha256sum }}
        checksum/secret-zitadel-secrets: {{ include (print $.Template.BasePath "/secret_zitadel-secrets.yaml") . | sha256sum }}
      labels:
        {{- include "zitadel.debugSelectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "zitadel.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      enableServiceLinks: false
      containers:
      {{- if .Values.zitadel.extraContainers }}
        {{- toYaml .Values.zitadel.extraContainers | nindent 8 }}
      {{- end }}
      {{- if .Values.zitadel.debug.extraContainers }}
        {{- toYaml .Values.zitadel.debug.extraContainers | nindent 8 }}
      {{- end }}
        - name: "{{ .Chart.Name }}-debug"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 14 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}-debug"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ "/bin/bash", "-c", 'echo "You can now open a shell within this pod by running the following command:"; echo ""; echo "kubectl --namespace {{ .Release.Namespace }} exec -it ${HOSTNAME} -- bash"; echo ""; echo "Check the /config directory and the secret mounts for ZITADEL config files"; echo "also check the ZITADEL_ prefixed environment variables"; echo "For zitadel commands that need the masterkey, pass the flag --masterkeyFromEnv"; echo "this pod completes automatically in a day"; echo "Make sure you set zitadel.debug.enabled to false and upgrade the release when you are done"; echo "Also, delete the debug pods replica set by running the following command:"; echo; echo "kubectl --namespace {{ .Release.Namespace }} delete replicaset {{ include "zitadel.fullname" . }}-debug"; sleep 86400' ]
          env:
            - name: ZITADEL_MASTERKEY
              valueFrom:
                secretKeyRef:
                  name: {{ default "zitadel-masterkey" .Values.zitadel.masterkeySecretName }}
                  key: masterkey
            - name: ZITADEL_FIRSTINSTANCE_MACHINEKEYPATH
              value: "/machinekey/sa.json"
            {{- $dbEnv := get (include "zitadel.dbkey.json" . | fromJson) "env" }}
            {{- if (or .Values.zitadel.dbSslCaCrt .Values.zitadel.dbSslCaCrtSecret) }}
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_ROOTCERT
              value: /db-ssl-ca-crt/ca.crt
            {{- end }}
            {{- if .Values.zitadel.dbSslUserCrtSecret }}
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_CERT
              value: /db-ssl-user-crt/tls.crt
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_KEY
              value: /db-ssl-user-crt/tls.key
            {{- end}}
            {{- with .Values.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.envVarsSecret }}
          envFrom:
            - secretRef:
                name: {{ .Values.envVarsSecret }}
          {{- end }}
          volumeMounts:
          - name: zitadel-config-yaml
            mountPath: /config
            readOnly: true
          {{- if .Values.zitadel.secretConfig }}
          - name: zitadel-secrets-yaml
            mountPath: /zitadel-secrets-yaml
            readOnly: true
          {{- end }}
          {{- if .Values.zitadel.configSecretName }}
          - name: zitadel-secret-config-yaml
            mountPath: /zitadel-secret-config-yaml
            readOnly: true
          {{- end }}
          {{- if (or .Values.zitadel.dbSslCaCrt .Values.zitadel.dbSslCaCrtSecret) }}
          - name: db-ssl-ca-crt
            mountPath: /db-ssl-ca-crt
            readOnly: true
          {{- end }}
          {{- if .Values.zitadel.dbSslUserCrtSecret }}
          - name: db-ssl-user-crt
            mountPath: /db-ssl-user-crt
            readOnly: true
          {{- end }}
      volumes:
      - name: zitadel-config-yaml
        configMap:
          name: zitadel-config-yaml
      {{- if .Values.zitadel.secretConfig }}
      - name: zitadel-secrets-yaml
        secret:
          secretName: zitadel-secrets-yaml
          defaultMode: 0440
      {{- end }}
      {{- if .Values.zitadel.configSecretName }}
      - name: zitadel-secret-config-yaml
        secret:
          secretName: {{ .Values.zitadel.configSecretName }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.zitadel.dbSslCaCrt }}
      - name: db-ssl-ca-crt
        secret:
          secretName: db-ssl-ca-crt
          defaultMode: 0440
      {{- end }}
      {{- if .Values.zitadel.dbSslCaCrtSecret }}
      - name: db-ssl-ca-crt
        secret:
          secretName: {{ .Values.zitadel.dbSslCaCrtSecret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.zitadel.dbSslUserCrtSecret }}
      - name: db-ssl-user-crt
        secret:
          secretName: {{ .Values.zitadel.dbSslUserCrtSecret }}
          defaultMode: 0440
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
