apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zitadel.fullname" . }}
  labels:
    {{- include "zitadel.start.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.revisionHistoryLimit }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  {{- end }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "zitadel.start.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap_zitadel.yaml") . | sha256sum }}
        checksum/nginx-configmap: {{ include (print $.Template.BasePath "/configmap_nginx_zitadel.yaml") . | sha256sum }}
        checksum/secret-db-ssl-ca-crt: {{ include (print $.Template.BasePath "/secret_db-ssl-ca-crt.yaml") . | sha256sum }}
        checksum/secret-zitadel-secrets: {{ include (print $.Template.BasePath "/secret_zitadel-secrets.yaml") . | sha256sum }}
        {{- if .Values.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/path: "/debug/metrics"
        prometheus.io/port: {{ include "zitadel.containerPort" . | quote }}
        {{- end }}
      labels:
        {{- include "zitadel.start.labels" . | nindent 8 }}
        {{- with .Values.podAdditionalLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "zitadel.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      enableServiceLinks: false
      containers:
      {{- if .Values.zitadel.extraContainers }}
        {{- toYaml .Values.zitadel.extraContainers | nindent 8 }}
      {{- end }}
      {{- if .Values.extraContainers }}
        {{- toYaml .Values.extraContainers | nindent 8 }}
      {{- end }}
        - name: {{ .Chart.Name }}-reverse-proxy
          # Nginx sidecar container handles TLS termination and proxies
          # traffic to the Zitadel application container. This
          # separation allows Zitadel to focus on application logic
          # while nginx manages TLS, connection handling, and protocol
          # negotiation (gRPC/HTTP).
          # Ref: https://kubernetes.io/docs/concepts/workloads/pods/
          # Alpine-based nginx image for smaller footprint. Version
          # pinned to 1.27 for stability and security updates.
          # Ref: https://hub.docker.com/_/nginx
          image: {{ .Values.zitadel.nginx.image | default "nginx:1.27-alpine" }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # Run nginx in foreground (daemon off) so Kubernetes can
          # manage the process lifecycle. Without this, nginx would
          # fork to background and the container would exit.
          # Ref: https://nginx.org/en/docs/ngx_core_module.html#daemon
          command: ["nginx", "-g", "daemon off;"]
          ports:
            # Nginx listens on port 80 (HTTP) or 443 (HTTPS) depending
            # on whether TLS is enabled. The helper function
            # zitadel.nginxPort returns the appropriate port.
            - containerPort: {{ include "zitadel.nginxPort" . }}
              # Port name derived from service.protocol (e.g.,
              # "http2-server"). Used for service port mapping.
              name: {{ .Values.service.protocol }}-server
              protocol: TCP
          # Liveness probe checks if nginx is responding. Kubernetes
          # will restart the container if this fails 3 times. The
          # /healthz endpoint is defined in the nginx config and
          # always returns 200 OK.
          # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ include "zitadel.nginxPort" . }}
              # Use HTTPS scheme when TLS is enabled, HTTP otherwise.
              # This matches how nginx is configured to listen.
              {{- if include "zitadel.tlsEnabled" . }}
              scheme: HTTPS
              {{- else }}
              scheme: HTTP
              {{- end }}
            # These probe timing values are tested defaults and rarely
            # need adjustment. They are intentionally not exposed as
            # configurable values to maintain consistency.
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          # Readiness probe determines if the container should receive
          # traffic. Uses same /healthz endpoint but with more
          # frequent checks (every 5s) to quickly detect when nginx
          # is ready to serve traffic after startup or restart.
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ include "zitadel.nginxPort" . }}
              {{- if include "zitadel.tlsEnabled" . }}
              scheme: HTTPS
              {{- else }}
              scheme: HTTP
              {{- end }}
            # These probe timing values are tested defaults and rarely
            # need adjustment. They are intentionally not exposed as
            # configurable values to maintain consistency.
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3
          # Volume mounts for nginx. These paths and configurations are
          # nginx-specific internals and are intentionally not exposed
          # as configurable values to maintain security and stability.
          volumeMounts:
            # Writable directory for nginx cache. Required because
            # the container runs with readOnlyRootFilesystem.
            # Not readOnly - nginx must write cache files here.
            - name: nginx-cache
              mountPath: /var/cache/nginx
            # Writable directory for nginx runtime files (pid, locks).
            # Required for non-root nginx operation.
            # Not readOnly - nginx must write runtime state here.
            - name: nginx-run
              mountPath: /var/run
            {{- if include "zitadel.tlsEnabled" . }}
            # TLS certificate and private key for HTTPS termination.
            # Contains tls.crt and tls.key referenced in nginx config
            # as ssl_certificate and ssl_certificate_key.
            - name: tls-certs
              mountPath: /etc/nginx/certs
              readOnly: true
            {{- end }}
            # Nginx configuration file defining server blocks,
            # upstreams, TLS settings, and gRPC/HTTP proxy rules.
            # Mounted as default.conf in the conf.d directory.
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d
              readOnly: true
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 14 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - start
            {{- if include "zitadel.tlsEnabled" . }}
            - --tlsMode
            - external
            {{- else }}
            - --tlsMode
            - disabled
            {{- end }}
            - --config
            - /config/zitadel-config-yaml
            {{- if .Values.zitadel.secretConfig }}
            - --config
            - /zitadel-secrets-yaml/zitadel-secrets-yaml
            {{- end }}
            {{- if and .Values.zitadel.configSecretName .Values.zitadel.configSecretKey }}
            - --config
            - /zitadel-secret-config-yaml/{{ .Values.zitadel.configSecretKey }}
            {{- end }}
            - --masterkeyFromEnv
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: ZITADEL_MASTERKEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "zitadel.masterkeySecretName" . }}
                  key: masterkey
            {{- $dbEnv := get (include "zitadel.dbkey.json" . | fromJson) "env" }}
            {{- if (or .Values.zitadel.dbSslCaCrt .Values.zitadel.dbSslCaCrtSecret) }}
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_ROOTCERT
              value: /db-ssl-ca-crt/ca.crt
            {{- end }}
            {{- if .Values.zitadel.dbSslUserCrtSecret }}
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_CERT
              value: /db-ssl-user-crt/tls.crt
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_KEY
              value: /db-ssl-user-crt/tls.key
            {{- end }}
            {{- with .Values.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.envVarsSecret }}
          envFrom:
            - secretRef:
                name: {{ .Values.envVarsSecret }}
          {{- end }}
          ports:
            - containerPort: {{ include "zitadel.containerPort" . }}
              name: http
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /debug/healthz
              port:  {{ include "zitadel.containerPort" . }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /debug/ready
              port:  {{ include "zitadel.containerPort" . }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /debug/ready
              port:  {{ include "zitadel.containerPort" . }}
              scheme: HTTP
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          volumeMounts:
            - name: zitadel-config-yaml
              mountPath: /config
              readOnly: true
          {{- if .Values.zitadel.secretConfig }}
            - name: zitadel-secrets-yaml
              mountPath: /zitadel-secrets-yaml
              readOnly: true
          {{- end }}
          {{- if .Values.zitadel.configSecretName }}
            - name: zitadel-secret-config-yaml
              mountPath: /zitadel-secret-config-yaml
              readOnly: true
          {{- end }}
          {{- if (or .Values.zitadel.dbSslCaCrt .Values.zitadel.dbSslCaCrtSecret) }}
            - name: db-ssl-ca-crt
              mountPath: /db-ssl-ca-crt
              readOnly: true
          {{- end }}
          {{- if .Values.zitadel.dbSslUserCrtSecret }}
            - name: db-ssl-user-crt
              mountPath: /db-ssl-user-crt
              readOnly: true
          {{- end }}
          {{- with .Values.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 14 }}
      {{- with .Values.zitadel.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        # Nginx requires writable directories for cache and runtime
        # files. These emptyDir volumes provide temporary storage that
        # persists for the pod lifetime but is cleared on restart.
        # Required because the nginx container runs with
        # readOnlyRootFilesystem security context (best practice for
        # container security).
        # Ref: https://kubernetes.io/docs/concepts/storage/volumes/
        # Ref: https://nginx.org/en/docs/ngx_core_module.html#user
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-run
          emptyDir: {}
        # TLS certificate and key for HTTPS termination in the nginx
        # sidecar. Mounted at /etc/nginx/certs/ and referenced in the
        # nginx configuration as ssl_certificate and
        # ssl_certificate_key. The secret must contain tls.crt and
        # tls.key in standard Kubernetes TLS secret format.
        # Ref: https://kubernetes.io/docs/concepts/configuration/secret/
        {{- if .Values.zitadel.serverSslCrtSecret }}
        - name: tls-certs
          secret:
            secretName: {{ .Values.zitadel.serverSslCrtSecret }}
        {{- else if .Values.zitadel.selfSignedCert.enabled }}
        - name: tls-certs
          secret:
            secretName: {{ include "zitadel.fullname" . }}-self-signed-tls
        {{- end }}
        # Nginx configuration that defines how traffic is proxied from
        # nginx to the zitadel application. Contains server blocks,
        # upstream definitions, TLS settings, proxy headers, and gRPC
        # configuration with HTTP fallback. Generated from
        # configmap_nginx_zitadel.yaml.
        # Mounted at /etc/nginx/conf.d/default.conf
        # Ref: https://nginx.org/en/docs/beginners_guide.html
        - name: nginx-conf
          configMap:
            name: {{ include "zitadel.fullname" . }}-nginx
        # Primary Zitadel configuration file containing application
        # settings, database configuration, and TLS mode. Generated
        # from the zitadel.configmapConfig values.
        # Mounted at /config/zitadel-config-yaml
        # Ref: https://zitadel.com/docs/self-hosting/manage/configure
        - name: zitadel-config-yaml
          configMap:
            name: {{ include "zitadel.configmapName" . }}
        {{- if .Values.zitadel.secretConfig }}
        # Additional Zitadel configuration for sensitive data (e.g.,
        # database credentials, API keys). Merged with the main config
        # at startup. Mode 0440 ensures only the owner and group can
        # read the sensitive data.
        # Mounted at /zitadel-secrets-yaml/zitadel-secrets-yaml
        - name: zitadel-secrets-yaml
          secret:
            secretName: {{ include "zitadel.secretName" . }}
            defaultMode: 0440
        {{- end }}
        {{- if .Values.zitadel.configSecretName }}
        # User-provided secret containing additional Zitadel
        # configuration. Allows users to inject custom config without
        # modifying the Helm chart. Mode 0440 for read-only access.
        # Mounted at /zitadel-secret-config-yaml/
        - name: zitadel-secret-config-yaml
          secret:
            secretName: {{ .Values.zitadel.configSecretName }}
            defaultMode: 0440
        {{- end }}
        {{- if .Values.zitadel.dbSslCaCrt }}
        # Database CA certificate for verifying the database server's
        # TLS certificate. Used when establishing secure connections
        # to PostgreSQL/CockroachDB. Mode 0440 for read-only access.
        # Mounted at /db-ssl-ca-crt/ca.crt
        - name: db-ssl-ca-crt
          secret:
            secretName: {{ include "zitadel.dbSslCaCrtSecretName" . }}
            defaultMode: 0440
        {{- end }}
        {{- if .Values.zitadel.dbSslCaCrtSecret }}
        # Database CA certificate (alternative mount when using an
        # existing secret). Used for the same purpose as dbSslCaCrt
        # above but references a user-provided secret.
        # Mounted at /db-ssl-ca-crt/ca.crt
        - name: db-ssl-ca-crt
          secret:
            secretName: {{ .Values.zitadel.dbSslCaCrtSecret }}
            defaultMode: 0440
        {{- end }}
        {{- if .Values.zitadel.dbSslUserCrtSecret }}
        # Client certificate and key for mTLS authentication to the
        # database. Contains both tls.crt and tls.key for mutual TLS.
        # Mode 0440 for read-only access to sensitive key material.
        # Mounted at /db-ssl-user-crt/
        - name: db-ssl-user-crt
          secret:
            secretName: {{ .Values.zitadel.dbSslUserCrtSecret }}
            defaultMode: 0440
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
